
Wirelesslab4760.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001032  000010c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800170  00800170  00001136  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000334  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001780  00000000  00000000  000023ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ab8  00000000  00000000  00003b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001acf  00000000  00000000  000045e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  000060b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005fd  00000000  00000000  00006328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001178  00000000  00000000  00006925  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f1  00000000  00000000  00007a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000070  00000000  00000000  00007c8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e2 e3       	ldi	r30, 0x32	; 50
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a0 37       	cpi	r26, 0x70	; 112
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e7       	ldi	r26, 0x70	; 112
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3c       	cpi	r26, 0xCF	; 207
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 17 08 	jmp	0x102e	; 0x102e <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

// UART file descriptor
// putchar and getchar are in uart.c
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

int main(void) {
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
	PAYLOAD_LENGTH = 10; //set the payload length of each packet
      b6:	8a e0       	ldi	r24, 0x0A	; 10
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	90 93 c3 01 	sts	0x01C3, r25
      be:	80 93 c2 01 	sts	0x01C2, r24
	init_RF(1); //enable enhanced shockburst
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	0e 94 82 03 	call	0x704	; 0x704 <init_RF>
	//set_RF_channel(8); can be used to change the RF channel to reduce interference
	set_RX_addr(PIPE_ADDRESS_0, 0);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	76 eb       	ldi	r23, 0xB6	; 182
      cc:	85 eb       	ldi	r24, 0xB5	; 181
      ce:	94 eb       	ldi	r25, 0xB4	; 180
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	set_RX_addr(PIPE_ADDRESS_1, 1);
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	76 eb       	ldi	r23, 0xB6	; 182
      da:	85 eb       	ldi	r24, 0xB5	; 181
      dc:	94 eb       	ldi	r25, 0xB4	; 180
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	set_RX_addr(PIPE_ADDRESS_2, 2);
      e4:	62 e0       	ldi	r22, 0x02	; 2
      e6:	76 eb       	ldi	r23, 0xB6	; 182
      e8:	85 eb       	ldi	r24, 0xB5	; 181
      ea:	94 eb       	ldi	r25, 0xB4	; 180
      ec:	42 e0       	ldi	r20, 0x02	; 2
      ee:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	set_RX_addr(PIPE_ADDRESS_3, 3);
      f2:	63 e0       	ldi	r22, 0x03	; 3
      f4:	76 eb       	ldi	r23, 0xB6	; 182
      f6:	85 eb       	ldi	r24, 0xB5	; 181
      f8:	94 eb       	ldi	r25, 0xB4	; 180
      fa:	43 e0       	ldi	r20, 0x03	; 3
      fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	set_RX_addr(PIPE_ADDRESS_4, 4);
     100:	64 e0       	ldi	r22, 0x04	; 4
     102:	76 eb       	ldi	r23, 0xB6	; 182
     104:	85 eb       	ldi	r24, 0xB5	; 181
     106:	94 eb       	ldi	r25, 0xB4	; 180
     108:	44 e0       	ldi	r20, 0x04	; 4
     10a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	set_RX_addr(PIPE_ADDRESS_5, 5);
     10e:	65 e0       	ldi	r22, 0x05	; 5
     110:	76 eb       	ldi	r23, 0xB6	; 182
     112:	85 eb       	ldi	r24, 0xB5	; 181
     114:	94 eb       	ldi	r25, 0xB4	; 180
     116:	45 e0       	ldi	r20, 0x05	; 5
     118:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <set_RX_addr>
	enable_pipe(0);
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	enable_pipe(1);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	enable_pipe(2);
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	enable_pipe(3);
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	enable_pipe(4);
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	enable_pipe(5);
     13a:	85 e0       	ldi	r24, 0x05	; 5
     13c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enable_pipe>
	unsigned char pipe_received;
	uart_init();
     140:	0e 94 df 00 	call	0x1be	; 0x1be <uart_init>
	stdout = stdin = stderr = &uart_str;
     144:	85 e0       	ldi	r24, 0x05	; 5
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	90 93 ce 01 	sts	0x01CE, r25
     14c:	80 93 cd 01 	sts	0x01CD, r24
     150:	90 93 ca 01 	sts	0x01CA, r25
     154:	80 93 c9 01 	sts	0x01C9, r24
     158:	90 93 cc 01 	sts	0x01CC, r25
     15c:	80 93 cb 01 	sts	0x01CB, r24
	char* packet = (char *) malloc(PAYLOAD_LENGTH);
     160:	80 91 c2 01 	lds	r24, 0x01C2
     164:	90 91 c3 01 	lds	r25, 0x01C3
     168:	0e 94 ee 03 	call	0x7dc	; 0x7dc <malloc>
     16c:	8c 01       	movw	r16, r24
	while (1) {
		if (RX_FIFO_status() == 1) {
			pipe_received = read_RX_payload(packet);
			fprintf(stdout,"<%s>", packet);
     16e:	c0 e0       	ldi	r28, 0x00	; 0
     170:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char pipe_received;
	uart_init();
	stdout = stdin = stderr = &uart_str;
	char* packet = (char *) malloc(PAYLOAD_LENGTH);
	while (1) {
		if (RX_FIFO_status() == 1) {
     172:	0e 94 5e 03 	call	0x6bc	; 0x6bc <RX_FIFO_status>
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	e1 f7       	brne	.-8      	; 0x172 <main+0xc4>
			pipe_received = read_RX_payload(packet);
     17a:	c8 01       	movw	r24, r16
     17c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_RX_payload>
			fprintf(stdout,"<%s>", packet);
     180:	00 d0       	rcall	.+0      	; 0x182 <main+0xd4>
     182:	00 d0       	rcall	.+0      	; 0x184 <main+0xd6>
     184:	00 d0       	rcall	.+0      	; 0x186 <main+0xd8>
     186:	ed b7       	in	r30, 0x3d	; 61
     188:	fe b7       	in	r31, 0x3e	; 62
     18a:	31 96       	adiw	r30, 0x01	; 1
     18c:	20 91 cb 01 	lds	r18, 0x01CB
     190:	30 91 cc 01 	lds	r19, 0x01CC
     194:	ad b7       	in	r26, 0x3d	; 61
     196:	be b7       	in	r27, 0x3e	; 62
     198:	12 96       	adiw	r26, 0x02	; 2
     19a:	3c 93       	st	X, r19
     19c:	2e 93       	st	-X, r18
     19e:	11 97       	sbiw	r26, 0x01	; 1
     1a0:	d3 83       	std	Z+3, r29	; 0x03
     1a2:	c2 83       	std	Z+2, r28	; 0x02
     1a4:	04 83       	std	Z+4, r16	; 0x04
     1a6:	15 83       	std	Z+5, r17	; 0x05
     1a8:	0e 94 21 05 	call	0xa42	; 0xa42 <fprintf>
     1ac:	8d b7       	in	r24, 0x3d	; 61
     1ae:	9e b7       	in	r25, 0x3e	; 62
     1b0:	06 96       	adiw	r24, 0x06	; 6
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	9e bf       	out	0x3e, r25	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	8d bf       	out	0x3d, r24	; 61
     1bc:	da cf       	rjmp	.-76     	; 0x172 <main+0xc4>

000001be <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     1be:	87 e6       	ldi	r24, 0x67	; 103
     1c0:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	80 93 c1 00 	sts	0x00C1, r24
}
     1ca:	08 95       	ret

000001cc <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24

  if (c == '\a')
     1d0:	87 30       	cpi	r24, 0x07	; 7
     1d2:	49 f4       	brne	.+18     	; 0x1e6 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     1d4:	60 91 cd 01 	lds	r22, 0x01CD
     1d8:	70 91 ce 01 	lds	r23, 0x01CE
     1dc:	83 e1       	ldi	r24, 0x13	; 19
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputs>
      return 0;
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <uart_putchar+0x30>
    }

  if (c == '\n')
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	19 f4       	brne	.+6      	; 0x1f0 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     1ea:	8d e0       	ldi	r24, 0x0D	; 13
     1ec:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     1f0:	80 91 c0 00 	lds	r24, 0x00C0
     1f4:	85 ff       	sbrs	r24, 5
     1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <uart_putchar+0x24>
  UDR0 = c;
     1f8:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	1f 91       	pop	r17
     202:	08 95       	ret

00000204 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     212:	80 91 70 01 	lds	r24, 0x0170
     216:	90 91 71 01 	lds	r25, 0x0171
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	09 f0       	breq	.+2      	; 0x220 <uart_getchar+0x1c>
     21e:	a1 c0       	rjmp	.+322    	; 0x362 <uart_getchar+0x15e>
     220:	02 e7       	ldi	r16, 0x72	; 114
     222:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     224:	80 91 c0 00 	lds	r24, 0x00C0
     228:	87 ff       	sbrs	r24, 7
     22a:	fc cf       	rjmp	.-8      	; 0x224 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     22c:	80 91 c0 00 	lds	r24, 0x00C0
     230:	84 fd       	sbrc	r24, 4
     232:	a8 c0       	rjmp	.+336    	; 0x384 <uart_getchar+0x180>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     234:	80 91 c0 00 	lds	r24, 0x00C0
     238:	83 fd       	sbrc	r24, 3
     23a:	a7 c0       	rjmp	.+334    	; 0x38a <uart_getchar+0x186>
	  return _FDEV_ERR;
	c = UDR0;
     23c:	80 91 c6 00 	lds	r24, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     240:	8d 30       	cpi	r24, 0x0D	; 13
     242:	11 f0       	breq	.+4      	; 0x248 <uart_getchar+0x44>
	  c = '\n';
	if (c == '\n')
     244:	8a 30       	cpi	r24, 0x0A	; 10
     246:	69 f4       	brne	.+26     	; 0x262 <uart_getchar+0x5e>
	  {
	    *cp = c;
     248:	8a e0       	ldi	r24, 0x0A	; 10
     24a:	f8 01       	movw	r30, r16
     24c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     24e:	be 01       	movw	r22, r28
     250:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
	    rxp = b;
     254:	82 e7       	ldi	r24, 0x72	; 114
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	90 93 71 01 	sts	0x0171, r25
     25c:	80 93 70 01 	sts	0x0170, r24
	    break;
     260:	80 c0       	rjmp	.+256    	; 0x362 <uart_getchar+0x15e>
	  }
	else if (c == '\t')
     262:	89 30       	cpi	r24, 0x09	; 9
     264:	09 f4       	brne	.+2      	; 0x268 <uart_getchar+0x64>
	  c = ' ';
     266:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     268:	98 2f       	mov	r25, r24
     26a:	90 52       	subi	r25, 0x20	; 32
     26c:	9f 35       	cpi	r25, 0x5F	; 95
     26e:	10 f0       	brcs	.+4      	; 0x274 <uart_getchar+0x70>
     270:	80 3a       	cpi	r24, 0xA0	; 160
     272:	68 f0       	brcs	.+26     	; 0x28e <uart_getchar+0x8a>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	01 3c       	cpi	r16, 0xC1	; 193
     278:	1f 07       	cpc	r17, r31
     27a:	11 f4       	brne	.+4      	; 0x280 <uart_getchar+0x7c>
	      uart_putchar('\a', stream);
     27c:	87 e0       	ldi	r24, 0x07	; 7
     27e:	03 c0       	rjmp	.+6      	; 0x286 <uart_getchar+0x82>
	    else
	      {
		*cp++ = c;
     280:	f8 01       	movw	r30, r16
     282:	81 93       	st	Z+, r24
     284:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     286:	be 01       	movw	r22, r28
     288:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
     28c:	cb cf       	rjmp	.-106    	; 0x224 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     28e:	82 31       	cpi	r24, 0x12	; 18
     290:	39 f1       	breq	.+78     	; 0x2e0 <uart_getchar+0xdc>
     292:	83 31       	cpi	r24, 0x13	; 19
     294:	30 f4       	brcc	.+12     	; 0x2a2 <uart_getchar+0x9e>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	09 f4       	brne	.+2      	; 0x29c <uart_getchar+0x98>
     29a:	77 c0       	rjmp	.+238    	; 0x38a <uart_getchar+0x186>
     29c:	88 30       	cpi	r24, 0x08	; 8
     29e:	11 f6       	brne	.-124    	; 0x224 <uart_getchar+0x20>
     2a0:	0a c0       	rjmp	.+20     	; 0x2b6 <uart_getchar+0xb2>
     2a2:	87 31       	cpi	r24, 0x17	; 23
     2a4:	31 f0       	breq	.+12     	; 0x2b2 <uart_getchar+0xae>
     2a6:	8f 37       	cpi	r24, 0x7F	; 127
     2a8:	31 f0       	breq	.+12     	; 0x2b6 <uart_getchar+0xb2>
     2aa:	85 31       	cpi	r24, 0x15	; 21
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <uart_getchar+0xac>
     2ae:	ba cf       	rjmp	.-140    	; 0x224 <uart_getchar+0x20>
     2b0:	38 c0       	rjmp	.+112    	; 0x322 <uart_getchar+0x11e>
     2b2:	78 01       	movw	r14, r16
     2b4:	48 c0       	rjmp	.+144    	; 0x346 <uart_getchar+0x142>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	02 37       	cpi	r16, 0x72	; 114
     2ba:	1f 07       	cpc	r17, r31
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <uart_getchar+0xbc>
     2be:	08 f4       	brcc	.+2      	; 0x2c2 <uart_getchar+0xbe>
     2c0:	b1 cf       	rjmp	.-158    	; 0x224 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     2c2:	88 e0       	ldi	r24, 0x08	; 8
     2c4:	be 01       	movw	r22, r28
     2c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar(' ', stream);
     2ca:	80 e2       	ldi	r24, 0x20	; 32
     2cc:	be 01       	movw	r22, r28
     2ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar('\b', stream);
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	be 01       	movw	r22, r28
     2d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		cp--;
     2da:	01 50       	subi	r16, 0x01	; 1
     2dc:	10 40       	sbci	r17, 0x00	; 0
     2de:	a2 cf       	rjmp	.-188    	; 0x224 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     2e0:	8d e0       	ldi	r24, 0x0D	; 13
     2e2:	be 01       	movw	r22, r28
     2e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     2e8:	82 e7       	ldi	r24, 0x72	; 114
     2ea:	e8 2e       	mov	r14, r24
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	f8 2e       	mov	r15, r24
     2f0:	06 c0       	rjmp	.+12     	; 0x2fe <uart_getchar+0xfa>
	      uart_putchar(*cp2, stream);
     2f2:	f7 01       	movw	r30, r14
     2f4:	81 91       	ld	r24, Z+
     2f6:	7f 01       	movw	r14, r30
     2f8:	be 01       	movw	r22, r28
     2fa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     2fe:	e0 16       	cp	r14, r16
     300:	f1 06       	cpc	r15, r17
     302:	b8 f3       	brcs	.-18     	; 0x2f2 <uart_getchar+0xee>
     304:	8f cf       	rjmp	.-226    	; 0x224 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	be 01       	movw	r22, r28
     30a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar(' ', stream);
     30e:	80 e2       	ldi	r24, 0x20	; 32
     310:	be 01       	movw	r22, r28
     312:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar('\b', stream);
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	be 01       	movw	r22, r28
     31a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		cp--;
     31e:	01 50       	subi	r16, 0x01	; 1
     320:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	02 37       	cpi	r16, 0x72	; 114
     326:	1f 07       	cpc	r17, r31
     328:	09 f0       	breq	.+2      	; 0x32c <uart_getchar+0x128>
     32a:	68 f7       	brcc	.-38     	; 0x306 <uart_getchar+0x102>
     32c:	7b cf       	rjmp	.-266    	; 0x224 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     32e:	88 e0       	ldi	r24, 0x08	; 8
     330:	be 01       	movw	r22, r28
     332:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar(' ', stream);
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	be 01       	movw	r22, r28
     33a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
		uart_putchar('\b', stream);
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	be 01       	movw	r22, r28
     342:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
     346:	87 01       	movw	r16, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     348:	82 e7       	ldi	r24, 0x72	; 114
     34a:	e8 16       	cp	r14, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	f8 06       	cpc	r15, r24
     350:	09 f0       	breq	.+2      	; 0x354 <uart_getchar+0x150>
     352:	08 f4       	brcc	.+2      	; 0x356 <uart_getchar+0x152>
     354:	67 cf       	rjmp	.-306    	; 0x224 <uart_getchar+0x20>
     356:	f7 01       	movw	r30, r14
     358:	82 91       	ld	r24, -Z
     35a:	7f 01       	movw	r14, r30
     35c:	80 32       	cpi	r24, 0x20	; 32
     35e:	39 f7       	brne	.-50     	; 0x32e <uart_getchar+0x12a>
     360:	61 cf       	rjmp	.-318    	; 0x224 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     362:	e0 91 70 01 	lds	r30, 0x0170
     366:	f0 91 71 01 	lds	r31, 0x0171
     36a:	21 91       	ld	r18, Z+
     36c:	f0 93 71 01 	sts	0x0171, r31
     370:	e0 93 70 01 	sts	0x0170, r30
  if (c == '\n')
     374:	2a 30       	cpi	r18, 0x0A	; 10
     376:	21 f4       	brne	.+8      	; 0x380 <uart_getchar+0x17c>
    rxp = 0;
     378:	10 92 71 01 	sts	0x0171, r1
     37c:	10 92 70 01 	sts	0x0170, r1

  return c;
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	05 c0       	rjmp	.+10     	; 0x38e <uart_getchar+0x18a>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     384:	2e ef       	ldi	r18, 0xFE	; 254
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	02 c0       	rjmp	.+4      	; 0x38e <uart_getchar+0x18a>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	3f ef       	ldi	r19, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     38e:	c9 01       	movw	r24, r18
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	08 95       	ret

0000039e <set_CSN>:
//Helper functions, users do not need to access these ////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**	CSN pin is used to initiate and end the communication between the SPI module of mega644 and the RF chip*/
void set_CSN(unsigned char value){
	if (value == 1) PORTB |= (1<<CSN);//Start the SPI communication
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <set_CSN+0x8>
     3a2:	2c 9a       	sbi	0x05, 4	; 5
     3a4:	08 95       	ret
	else if (value == 0) PORTB &= ~(1<<CSN);//end transmission
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <set_CSN+0xe>
     3aa:	2c 98       	cbi	0x05, 4	; 5
     3ac:	08 95       	ret

000003ae <set_CE>:
}

/**	CE enables and disables the transceiver from transmitting and receiving*/
void set_CE(unsigned char value){
	if (value == 1) PORTB |= (1<<CE);
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <set_CE+0x8>
     3b2:	2a 9a       	sbi	0x05, 2	; 5
     3b4:	08 95       	ret
	else if (value == 0) PORTB &= ~(1<<CE);
     3b6:	88 23       	and	r24, r24
     3b8:	09 f4       	brne	.+2      	; 0x3bc <set_CE+0xe>
     3ba:	2a 98       	cbi	0x05, 2	; 5
     3bc:	08 95       	ret

000003be <SPI_transmit>:
}

/** helper function for transmitting data by SPI*/
unsigned char SPI_transmit(unsigned char data){
	SPDR = data;
     3be:	8e bd       	out	0x2e, r24	; 46
	//wait for the data to be transmitted
	while(!(SPSR&(1<<SPIF))); //Bit 7 of SPSR is set high when serial transfer is complete
     3c0:	0d b4       	in	r0, 0x2d	; 45
     3c2:	07 fe       	sbrs	r0, 7
     3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <SPI_transmit+0x2>
	//flag is cleared by reading SPDR
	return SPDR;
     3c6:	8e b5       	in	r24, 0x2e	; 46
}
     3c8:	08 95       	ret

000003ca <read_RX_payload>:
	else return 1;
}

/** Reads up to PAYLOAD_LENGTH bytes of a received packet from the RX FIFO into buffer 
	returns the pipe number that the packet was received from*/
unsigned char read_RX_payload(char* buffer) {
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	8c 01       	movw	r16, r24
	unsigned char i;
	set_CE(0);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
	set_CSN(0);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	SPI_transmit(R_RX_PAYLOAD);
     3e2:	81 e6       	ldi	r24, 0x61	; 97
     3e4:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     3e8:	8e b5       	in	r24, 0x2e	; 46
     3ea:	80 93 c4 01 	sts	0x01C4, r24
	for(i = 0; i < PAYLOAD_LENGTH; i++){
     3ee:	ff 24       	eor	r15, r15
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <read_RX_payload+0x38>
		SPI_transmit(0x00);	//Send null data
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
		buffer[i] = SPDR;
     3f8:	8e b5       	in	r24, 0x2e	; 46
     3fa:	c0 0f       	add	r28, r16
     3fc:	d1 1f       	adc	r29, r17
     3fe:	88 83       	st	Y, r24
	unsigned char i;
	set_CE(0);
	set_CSN(0);
	SPI_transmit(R_RX_PAYLOAD);
	status = SPDR;
	for(i = 0; i < PAYLOAD_LENGTH; i++){
     400:	f3 94       	inc	r15
     402:	cf 2d       	mov	r28, r15
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	80 91 c2 01 	lds	r24, 0x01C2
     40a:	90 91 c3 01 	lds	r25, 0x01C3
     40e:	c8 17       	cp	r28, r24
     410:	d9 07       	cpc	r29, r25
     412:	78 f3       	brcs	.-34     	; 0x3f2 <read_RX_payload+0x28>
		SPI_transmit(0x00);	//Send null data
		buffer[i] = SPDR;
	}
	set_CSN(1);//end transmission
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	set_CE(1);
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
	//returns RX_P_NO in the STATUS register, which indicates the pipe that the payload was received from,
	//RX_P_NO = 6 indicates not used and RX_P_NO = 7 indicates RX FIFO empty
	return (status & 0xE) >> 1;
     420:	80 91 c4 01 	lds	r24, 0x01C4
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	8e 70       	andi	r24, 0x0E	; 14
     428:	90 70       	andi	r25, 0x00	; 0
     42a:	95 95       	asr	r25
     42c:	87 95       	ror	r24
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	08 95       	ret

0000043a <read_RF_register>:
	//flag is cleared by reading SPDR
	return SPDR;
}

/** Reads the contents of the register specified by addr */
unsigned char read_RF_register(unsigned char addr){
     43a:	1f 93       	push	r17
     43c:	18 2f       	mov	r17, r24
	unsigned char temp8;
	if(addr > 0x17 && addr < 0x1C || addr > 0x1D) return 0xFFFF;
     43e:	88 51       	subi	r24, 0x18	; 24
     440:	84 30       	cpi	r24, 0x04	; 4
     442:	98 f0       	brcs	.+38     	; 0x46a <read_RF_register+0x30>
     444:	1e 31       	cpi	r17, 0x1E	; 30
     446:	88 f4       	brcc	.+34     	; 0x46a <read_RF_register+0x30>
	set_CSN(0);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	temp8 = R_REGISTER|addr;
	SPI_transmit(temp8);
     44e:	81 2f       	mov	r24, r17
     450:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     454:	8e b5       	in	r24, 0x2e	; 46
     456:	80 93 c4 01 	sts	0x01C4, r24
	SPI_transmit(0x00);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	set_CSN(1);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	temp8 = SPDR;
     466:	8e b5       	in	r24, 0x2e	; 46
	return temp8;
     468:	01 c0       	rjmp	.+2      	; 0x46c <read_RF_register+0x32>
}

/** Reads the contents of the register specified by addr */
unsigned char read_RF_register(unsigned char addr){
	unsigned char temp8;
	if(addr > 0x17 && addr < 0x1C || addr > 0x1D) return 0xFFFF;
     46a:	8f ef       	ldi	r24, 0xFF	; 255
	status = SPDR;
	SPI_transmit(0x00);
	set_CSN(1);
	temp8 = SPDR;
	return temp8;
}
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <write_RF_register>:

/** Writes unsigned char value to the register specified by addr */
void write_RF_register(unsigned char addr, unsigned char value){
     470:	1f 93       	push	r17
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	0f 92       	push	r0
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	18 2f       	mov	r17, r24
	unsigned char temp8;
	set_CSN(0);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	69 83       	std	Y+1, r22	; 0x01
     482:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	temp8 = W_REGISTER | addr;
	SPI_transmit(temp8);
     486:	81 2f       	mov	r24, r17
     488:	80 62       	ori	r24, 0x20	; 32
     48a:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	SPI_transmit(value);
     48e:	69 81       	ldd	r22, Y+1	; 0x01
     490:	86 2f       	mov	r24, r22
     492:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	set_CSN(1);
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
}
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	1f 91       	pop	r17
     4a4:	08 95       	ret

000004a6 <set_RF_channel>:
		write_RF_register(RX_ADDR_P0 + pipe, temp8);
	}
}

/** Sets the RF channel to channel, channel is a 7 bit number */
void set_RF_channel(unsigned char channel) {
     4a6:	68 2f       	mov	r22, r24
	write_RF_register(RF_CH, channel);
     4a8:	85 e0       	ldi	r24, 0x05	; 5
     4aa:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
}
     4ae:	08 95       	ret

000004b0 <set_mode>:
	write_RF_register(EN_RXADDR, enrxaddr);
}

/**	Sets the transciever to TX mode if mode == TX_MODE
	else set it to RX mode*/
void set_mode(unsigned char mode) {
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	08 2f       	mov	r16, r24
	unsigned char config = read_RF_register(CONFIG);
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 1d 02 	call	0x43a	; 0x43a <read_RF_register>
     4bc:	18 2f       	mov	r17, r24
	if (mode == TX_MODE) { //changing to TX mode
     4be:	00 23       	and	r16, r16
     4c0:	49 f4       	brne	.+18     	; 0x4d4 <set_mode+0x24>
		set_CE(0); //CE is 0 in TX mode except when transmitting
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
		config &= ~(1<<PRIM_RX);
     4c8:	61 2f       	mov	r22, r17
     4ca:	6e 7f       	andi	r22, 0xFE	; 254
		write_RF_register(CONFIG, config);
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
     4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <set_mode+0x34>
		_delay_us(130);
	} else { //changing to RX mode
		config |= 1<<PRIM_RX;
     4d4:	68 2f       	mov	r22, r24
     4d6:	61 60       	ori	r22, 0x01	; 1
		write_RF_register(CONFIG, config);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
		set_CE(1); //CE is kept at 1 in RX mode
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	87 e0       	ldi	r24, 0x07	; 7
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <set_mode+0x38>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <set_mode+0x3e>
     4ee:	00 00       	nop
		_delay_us(130);
	}
}
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <enable_pipe>:
	_delay_ms(5); //delay for module to power up
	set_CE(1); //CE is kept at 1 in RX mode
}

/** Enables the pipe specified by pipenumber, which can be from 0 to 5*/
void enable_pipe(unsigned char pipenumber) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	08 2f       	mov	r16, r24
	if (pipenumber < 0 || pipenumber > 5) {
     4fc:	86 30       	cpi	r24, 0x06	; 6
     4fe:	38 f0       	brcs	.+14     	; 0x50e <enable_pipe+0x18>
		fprintf(stdout,"Pipe number must be in range 0 to 5\n");
     500:	60 91 cb 01 	lds	r22, 0x01CB
     504:	70 91 cc 01 	lds	r23, 0x01CC
     508:	8b e1       	ldi	r24, 0x1B	; 27
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0f c0       	rjmp	.+30     	; 0x52c <enable_pipe+0x36>
		return;
	}
	if (PAYLOAD_LENGTH > 32 || PAYLOAD_LENGTH < 1) {
     50e:	20 91 c2 01 	lds	r18, 0x01C2
     512:	30 91 c3 01 	lds	r19, 0x01C3
     516:	21 50       	subi	r18, 0x01	; 1
     518:	30 40       	sbci	r19, 0x00	; 0
     51a:	20 32       	cpi	r18, 0x20	; 32
     51c:	31 05       	cpc	r19, r1
     51e:	48 f0       	brcs	.+18     	; 0x532 <enable_pipe+0x3c>
		fprintf(stdout,"PAYLOAD_LENGTH must be in range 1 to 32\n");
     520:	60 91 cb 01 	lds	r22, 0x01CB
     524:	70 91 cc 01 	lds	r23, 0x01CC
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputs>
		return;
     530:	2a c0       	rjmp	.+84     	; 0x586 <enable_pipe+0x90>
	}
	unsigned char enrxaddr = read_RF_register(EN_RXADDR);
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	0e 94 1d 02 	call	0x43a	; 0x43a <read_RF_register>
     538:	18 2f       	mov	r17, r24
	switch (pipenumber) {
     53a:	03 30       	cpi	r16, 0x03	; 3
     53c:	a1 f0       	breq	.+40     	; 0x566 <enable_pipe+0x70>
     53e:	04 30       	cpi	r16, 0x04	; 4
     540:	28 f4       	brcc	.+10     	; 0x54c <enable_pipe+0x56>
     542:	01 30       	cpi	r16, 0x01	; 1
     544:	51 f0       	breq	.+20     	; 0x55a <enable_pipe+0x64>
     546:	02 30       	cpi	r16, 0x02	; 2
     548:	29 f4       	brne	.+10     	; 0x554 <enable_pipe+0x5e>
     54a:	0a c0       	rjmp	.+20     	; 0x560 <enable_pipe+0x6a>
     54c:	04 30       	cpi	r16, 0x04	; 4
     54e:	71 f0       	breq	.+28     	; 0x56c <enable_pipe+0x76>
     550:	05 30       	cpi	r16, 0x05	; 5
     552:	79 f0       	breq	.+30     	; 0x572 <enable_pipe+0x7c>
		case 0:
			enrxaddr |= 1<<ERX_P0;
     554:	11 60       	ori	r17, 0x01	; 1
			write_RF_register(RX_PW_P0, PAYLOAD_LENGTH); //set payload length
     556:	81 e1       	ldi	r24, 0x11	; 17
     558:	0e c0       	rjmp	.+28     	; 0x576 <enable_pipe+0x80>
			break;
		case 1:
			enrxaddr |= 1<<ERX_P1;
     55a:	12 60       	ori	r17, 0x02	; 2
			write_RF_register(RX_PW_P1, PAYLOAD_LENGTH);
     55c:	82 e1       	ldi	r24, 0x12	; 18
     55e:	0b c0       	rjmp	.+22     	; 0x576 <enable_pipe+0x80>
			break;
		case 2:
			enrxaddr |= 1<<ERX_P2;
     560:	14 60       	ori	r17, 0x04	; 4
			write_RF_register(RX_PW_P2, PAYLOAD_LENGTH);
     562:	83 e1       	ldi	r24, 0x13	; 19
     564:	08 c0       	rjmp	.+16     	; 0x576 <enable_pipe+0x80>
			break;
		case 3:
			enrxaddr |= 1<<ERX_P3;
     566:	18 60       	ori	r17, 0x08	; 8
			write_RF_register(RX_PW_P3, PAYLOAD_LENGTH);
     568:	84 e1       	ldi	r24, 0x14	; 20
     56a:	05 c0       	rjmp	.+10     	; 0x576 <enable_pipe+0x80>
			break;
		case 4:
			enrxaddr |= 1<<ERX_P4;
     56c:	10 61       	ori	r17, 0x10	; 16
			write_RF_register(RX_PW_P4, PAYLOAD_LENGTH);
     56e:	85 e1       	ldi	r24, 0x15	; 21
     570:	02 c0       	rjmp	.+4      	; 0x576 <enable_pipe+0x80>
			break;
		case 5:
			enrxaddr |= 1<<ERX_P5;
     572:	10 62       	ori	r17, 0x20	; 32
			write_RF_register(RX_PW_P5, PAYLOAD_LENGTH);
     574:	86 e1       	ldi	r24, 0x16	; 22
     576:	60 91 c2 01 	lds	r22, 0x01C2
     57a:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
			break;
	}
	write_RF_register(EN_RXADDR, enrxaddr);
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	61 2f       	mov	r22, r17
     582:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
}
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <write_RF_register_long>:
	SPI_transmit(value);
	set_CSN(1);
}

/** Writes unsigned long longvalue to the register specified by addr */
void write_RF_register_long(unsigned char addr, unsigned char longvalue){
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	18 2f       	mov	r17, r24
     596:	06 2f       	mov	r16, r22
	unsigned char temp8;
	set_CSN(0);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	temp8 = W_REGISTER | addr;
	SPI_transmit(temp8);
     59e:	81 2f       	mov	r24, r17
     5a0:	80 62       	ori	r24, 0x20	; 32
     5a2:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     5a6:	8e b5       	in	r24, 0x2e	; 46
     5a8:	80 93 c4 01 	sts	0x01C4, r24
	temp8 = longvalue;
	SPI_transmit(temp8);
     5ac:	80 2f       	mov	r24, r16
     5ae:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	temp8 = longvalue >> 8;
     5b2:	c0 2f       	mov	r28, r16
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_transmit(temp8);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	temp8 = longvalue >> 16;
     5bc:	99 0f       	add	r25, r25
     5be:	88 0b       	sbc	r24, r24
     5c0:	98 2f       	mov	r25, r24
	SPI_transmit(temp8);
     5c2:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	temp8 = longvalue >> 24;
     5c6:	99 0f       	add	r25, r25
     5c8:	88 0b       	sbc	r24, r24
     5ca:	98 2f       	mov	r25, r24
	SPI_transmit(temp8);
     5cc:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	set_CSN(1);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <set_RX_addr>:
	write_RF_register_long(TX_ADDR, address);
}

/** Sets the RX address for the specified pipe 
	for transmitter, RX address for pipe 0 should be the same as the TX address*/
void set_RX_addr(unsigned long address, unsigned char pipe) {
     5e0:	84 2f       	mov	r24, r20
     5e2:	86 5f       	subi	r24, 0xF6	; 246
	if (pipe == 0 || pipe == 1) {
     5e4:	42 30       	cpi	r20, 0x02	; 2
     5e6:	18 f4       	brcc	.+6      	; 0x5ee <set_RX_addr+0xe>
		write_RF_register_long(RX_ADDR_P0 + pipe, address);
     5e8:	0e 94 c6 02 	call	0x58c	; 0x58c <write_RF_register_long>
     5ec:	08 95       	ret
	} else {
		unsigned char temp8 = address;
		write_RF_register(RX_ADDR_P0 + pipe, temp8);
     5ee:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
     5f2:	08 95       	ret

000005f4 <set_TX_addr>:
	return (status & 0xE) >> 1;
}

/** Sets the TX address of the transceiver */
void set_TX_addr(unsigned long address) {
	write_RF_register_long(TX_ADDR, address);
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	0e 94 c6 02 	call	0x58c	; 0x58c <write_RF_register_long>
}
     5fa:	08 95       	ret

000005fc <clear_IRQs>:
	set_CSN(1);
}

/** clear the RX_DR, TX_DS and MAX_RT IRQs by writing to 1 to bits corresponding to them in the STATUS register*/
void clear_IRQs(void){
	write_RF_register(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
     5fc:	87 e0       	ldi	r24, 0x07	; 7
     5fe:	60 e7       	ldi	r22, 0x70	; 112
     600:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
}
     604:	08 95       	ret

00000606 <read_status>:
	else return 0;
}

/** returns the value of the status register */
unsigned char read_status(void){
	set_CSN(0);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	SPI_transmit(NOP);
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     612:	8e b5       	in	r24, 0x2e	; 46
     614:	80 93 c4 01 	sts	0x01C4, r24
	set_CSN(1);
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	return status;
}
     61e:	80 91 c4 01 	lds	r24, 0x01C4
     622:	08 95       	ret

00000624 <check_TX_status>:

/**	return 1 if TX_DS is high meaning that ACK was received and packet was transmitted successfully
	return 2 if MAX_RT is high meaning that the max number of retries has been reached
	return 0 if tranmission is still in progress*/
unsigned char check_TX_status(void){
	read_status();
     624:	0e 94 03 03 	call	0x606	; 0x606 <read_status>
	if(status & (1<<TX_DS)){
     628:	80 91 c4 01 	lds	r24, 0x01C4
     62c:	85 ff       	sbrs	r24, 5
     62e:	04 c0       	rjmp	.+8      	; 0x638 <check_TX_status+0x14>
		clear_IRQs();
     630:	0e 94 fe 02 	call	0x5fc	; 0x5fc <clear_IRQs>
	 	return 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	08 95       	ret
	}
	if(status & (1<<MAX_RT)){
     638:	84 ff       	sbrs	r24, 4
     63a:	04 c0       	rjmp	.+8      	; 0x644 <check_TX_status+0x20>
		clear_IRQs();
     63c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <clear_IRQs>
	 	return 2;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	08 95       	ret
	}
	else return 0;
     644:	80 e0       	ldi	r24, 0x00	; 0
}
     646:	08 95       	ret

00000648 <transmit_packet>:
/** transmit up to PAYLOAD_LENGTH bytes of the packet.
	returns 1 if the transmission is successful.
	returns 2 if maximum number of retries reached without receiving ACK,
	this only occurs if enhanced shockburst is enabled.
	With enhanced shockburst disabled, the function always returns 1 unless the transciever is connected wrongly*/
unsigned char transmit_packet(char* packet) {
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	ec 01       	movw	r28, r24
	unsigned char i;
	char TX_status;
	set_CSN(0); //start sending packet to TX FIFO
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	status = SPI_transmit(W_TX_PAYLOAD);
     656:	80 ea       	ldi	r24, 0xA0	; 160
     658:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
     65c:	80 93 c4 01 	sts	0x01C4, r24
	for(i = 0; i < PAYLOAD_LENGTH; i++)
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	07 c0       	rjmp	.+14     	; 0x672 <transmit_packet+0x2a>
		SPI_transmit(packet[i]);
     664:	8c 0f       	add	r24, r28
     666:	9d 1f       	adc	r25, r29
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
unsigned char transmit_packet(char* packet) {
	unsigned char i;
	char TX_status;
	set_CSN(0); //start sending packet to TX FIFO
	status = SPI_transmit(W_TX_PAYLOAD);
	for(i = 0; i < PAYLOAD_LENGTH; i++)
     670:	1f 5f       	subi	r17, 0xFF	; 255
     672:	81 2f       	mov	r24, r17
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	20 91 c2 01 	lds	r18, 0x01C2
     67a:	30 91 c3 01 	lds	r19, 0x01C3
     67e:	82 17       	cp	r24, r18
     680:	93 07       	cpc	r25, r19
     682:	80 f3       	brcs	.-32     	; 0x664 <transmit_packet+0x1c>
		SPI_transmit(packet[i]);
	set_CSN(1);
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	set_CE(1); //set CE to 1 to begin transmission
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
     690:	f5 e3       	ldi	r31, 0x35	; 53
     692:	fa 95       	dec	r31
     694:	f1 f7       	brne	.-4      	; 0x692 <transmit_packet+0x4a>
     696:	00 00       	nop
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <transmit_packet+0x54>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <transmit_packet+0x5a>
     6a2:	00 00       	nop
	_delay_us(10); //CE must be high for at least 10us to switch to the TX settling state
	_delay_us(130); //130us in the TX settling state
	while (1) { //loop until transmission successful or MAX_RT high
		TX_status = check_TX_status();
     6a4:	0e 94 12 03 	call	0x624	; 0x624 <check_TX_status>
		if (TX_status == 1) return 1; //transmission successful
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <transmit_packet+0x6a>
		if (TX_status == 2) return 2; //MAX_RT high, meaning maximum number of retries reached without receiving ACK
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	d1 f7       	brne	.-12     	; 0x6a4 <transmit_packet+0x5c>
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <transmit_packet+0x6c>
	set_CE(1); //set CE to 1 to begin transmission
	_delay_us(10); //CE must be high for at least 10us to switch to the TX settling state
	_delay_us(130); //130us in the TX settling state
	while (1) { //loop until transmission successful or MAX_RT high
		TX_status = check_TX_status();
		if (TX_status == 1) return 1; //transmission successful
     6b2:	81 e0       	ldi	r24, 0x01	; 1
		if (TX_status == 2) return 2; //MAX_RT high, meaning maximum number of retries reached without receiving ACK
	}
	set_CE(0);
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <RX_FIFO_status>:

/** return 0 if RX_FIFO is empty. 1 otherwise */
unsigned char RX_FIFO_status(void) {
	read_status();
     6bc:	0e 94 03 03 	call	0x606	; 0x606 <read_status>
	if ((status & 0xE)>>1 == 7) //RX FIFO is empty
     6c0:	90 91 c4 01 	lds	r25, 0x01C4
     6c4:	9e 70       	andi	r25, 0x0E	; 14
		return 0;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	9e 30       	cpi	r25, 0x0E	; 14
     6ca:	09 f4       	brne	.+2      	; 0x6ce <RX_FIFO_status+0x12>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;
}
     6ce:	08 95       	ret

000006d0 <flush_TX_FIFO>:
	return status;
}

/** Flushes the TX_FIFO */
void flush_TX_FIFO(void){
	set_CSN(0);
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	SPI_transmit(FLUSH_TX);
     6d6:	81 ee       	ldi	r24, 0xE1	; 225
     6d8:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     6dc:	8e b5       	in	r24, 0x2e	; 46
     6de:	80 93 c4 01 	sts	0x01C4, r24
	set_CSN(1);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
}
     6e8:	08 95       	ret

000006ea <flush_RX_FIFO>:

/** Flushes the RX_FIFO */
void flush_RX_FIFO(void){
	set_CSN(0);
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
	SPI_transmit(FLUSH_RX);
     6f0:	82 ee       	ldi	r24, 0xE2	; 226
     6f2:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_transmit>
	status = SPDR;
     6f6:	8e b5       	in	r24, 0x2e	; 46
     6f8:	80 93 c4 01 	sts	0x01C4, r24
	set_CSN(1);
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 cf 01 	call	0x39e	; 0x39e <set_CSN>
}
     702:	08 95       	ret

00000704 <init_RF>:
#include <util/delay.h>

/** initialize the nRF24L01+ transceiver
	enhanced_shockburst_enable is set to 0 to disable enhanced shockburst and 1 to enable
	the transceiver starts out in RX mode*/
void init_RF(unsigned char enhanced_shockburst_enable) {
     704:	1f 93       	push	r17
     706:	18 2f       	mov	r17, r24
	if (PAYLOAD_LENGTH > 32 || PAYLOAD_LENGTH < 1) {
     708:	20 91 c2 01 	lds	r18, 0x01C2
     70c:	30 91 c3 01 	lds	r19, 0x01C3
     710:	21 50       	subi	r18, 0x01	; 1
     712:	30 40       	sbci	r19, 0x00	; 0
     714:	20 32       	cpi	r18, 0x20	; 32
     716:	31 05       	cpc	r19, r1
     718:	48 f0       	brcs	.+18     	; 0x72c <init_RF+0x28>
		fprintf(stdout,"PAYLOAD_LENGTH must be in range 1 to 32\n");
     71a:	60 91 cb 01 	lds	r22, 0x01CB
     71e:	70 91 cc 01 	lds	r23, 0x01CC
     722:	80 e4       	ldi	r24, 0x40	; 64
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputs>
		return;
     72a:	4a c0       	rjmp	.+148    	; 0x7c0 <init_RF+0xbc>
	}
	//SPI settings for ATmega644
	DDR_SPI = (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_CSN) | (0<<DD_MISO) | (1<<DD_CE);
     72c:	84 eb       	ldi	r24, 0xB4	; 180
     72e:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
     730:	80 e5       	ldi	r24, 0x50	; 80
     732:	8c bd       	out	0x2c, r24	; 44
	set_CE(0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	91 ee       	ldi	r25, 0xE1	; 225
     73e:	a4 e0       	ldi	r26, 0x04	; 4
     740:	81 50       	subi	r24, 0x01	; 1
     742:	90 40       	sbci	r25, 0x00	; 0
     744:	a0 40       	sbci	r26, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <init_RF+0x3c>
     748:	00 c0       	rjmp	.+0      	; 0x74a <init_RF+0x46>
     74a:	00 00       	nop
	_delay_ms(100); //delay is needed for module to power on
	write_RF_register(SETUP_AW, 0x02); //set address width to 4 bytes
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(RF_CH, 0x00); //set RF channel
     754:	85 e0       	ldi	r24, 0x05	; 5
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(RF_SETUP, 1<<RF_DR_HIGH | 0x3<<RF_PWR); //data rate to 2 Mbps and output power to 0dBm
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	6e e0       	ldi	r22, 0x0E	; 14
     760:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(RX_PW_P0, PAYLOAD_LENGTH); //set payload length
     764:	81 e1       	ldi	r24, 0x11	; 17
     766:	60 91 c2 01 	lds	r22, 0x01C2
     76a:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(RX_PW_P1, PAYLOAD_LENGTH); //set payload length
     76e:	82 e1       	ldi	r24, 0x12	; 18
     770:	60 91 c2 01 	lds	r22, 0x01C2
     774:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(FEATURE, 0<<EN_DPL | 0<<EN_ACK_PAY);
     778:	8d e1       	ldi	r24, 0x1D	; 29
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(DYNPD, 0x0);
     780:	8c e1       	ldi	r24, 0x1C	; 28
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	if (enhanced_shockburst_enable == 1) 
     788:	11 30       	cpi	r17, 0x01	; 1
     78a:	19 f4       	brne	.+6      	; 0x792 <init_RF+0x8e>
		write_RF_register(EN_AA, 0x3F); //enable Enhanced ShockBurst on all pipes
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	6f e3       	ldi	r22, 0x3F	; 63
     790:	02 c0       	rjmp	.+4      	; 0x796 <init_RF+0x92>
	else 
		write_RF_register(EN_AA, 0x0); //disable Enhanced ShockBurst
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	write_RF_register(CONFIG, (1<<EN_CRC)|(1<<PWR_UP)|(1<<PRIM_RX));
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	6b e0       	ldi	r22, 0x0B	; 11
     79e:	0e 94 38 02 	call	0x470	; 0x470 <write_RF_register>
	//clear IRQs and FIFOs
	clear_IRQs();
     7a2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <clear_IRQs>
	flush_TX_FIFO();
     7a6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <flush_TX_FIFO>
	flush_RX_FIFO();
     7aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <flush_RX_FIFO>
     7ae:	af e1       	ldi	r26, 0x1F	; 31
     7b0:	be e4       	ldi	r27, 0x4E	; 78
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <init_RF+0xae>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <init_RF+0xb4>
     7b8:	00 00       	nop
	_delay_ms(5); //delay for module to power up
	set_CE(1); //CE is kept at 1 in RX mode
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <set_CE>
}
     7c0:	1f 91       	pop	r17
     7c2:	08 95       	ret

000007c4 <check_RX_DR>:
	set_CSN(1);
}

/** returns true if the RX_DR flag is set, indicating that a packet was received*/
unsigned char check_RX_DR(void){
	read_status();
     7c4:	0e 94 03 03 	call	0x606	; 0x606 <read_status>
	if(status&(1<<RX_DR)){
     7c8:	80 91 c4 01 	lds	r24, 0x01C4
     7cc:	86 ff       	sbrs	r24, 6
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <check_RX_DR+0x14>
		clear_IRQs();
     7d0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <clear_IRQs>
	 	return 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	08 95       	ret
	}
	else return 0;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
}
     7da:	08 95       	ret

000007dc <malloc>:
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	10 f4       	brcc	.+4      	; 0x7ea <malloc+0xe>
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	e0 91 c7 01 	lds	r30, 0x01C7
     7ee:	f0 91 c8 01 	lds	r31, 0x01C8
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	26 c0       	rjmp	.+76     	; 0x848 <malloc+0x6c>
     7fc:	60 81       	ld	r22, Z
     7fe:	71 81       	ldd	r23, Z+1	; 0x01
     800:	68 17       	cp	r22, r24
     802:	79 07       	cpc	r23, r25
     804:	e0 f0       	brcs	.+56     	; 0x83e <malloc+0x62>
     806:	68 17       	cp	r22, r24
     808:	79 07       	cpc	r23, r25
     80a:	81 f4       	brne	.+32     	; 0x82c <malloc+0x50>
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	93 81       	ldd	r25, Z+3	; 0x03
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	31 f0       	breq	.+12     	; 0x822 <malloc+0x46>
     816:	d9 01       	movw	r26, r18
     818:	13 96       	adiw	r26, 0x03	; 3
     81a:	9c 93       	st	X, r25
     81c:	8e 93       	st	-X, r24
     81e:	12 97       	sbiw	r26, 0x02	; 2
     820:	2b c0       	rjmp	.+86     	; 0x878 <malloc+0x9c>
     822:	90 93 c8 01 	sts	0x01C8, r25
     826:	80 93 c7 01 	sts	0x01C7, r24
     82a:	26 c0       	rjmp	.+76     	; 0x878 <malloc+0x9c>
     82c:	41 15       	cp	r20, r1
     82e:	51 05       	cpc	r21, r1
     830:	19 f0       	breq	.+6      	; 0x838 <malloc+0x5c>
     832:	64 17       	cp	r22, r20
     834:	75 07       	cpc	r23, r21
     836:	18 f4       	brcc	.+6      	; 0x83e <malloc+0x62>
     838:	ab 01       	movw	r20, r22
     83a:	e9 01       	movw	r28, r18
     83c:	df 01       	movw	r26, r30
     83e:	9f 01       	movw	r18, r30
     840:	72 81       	ldd	r23, Z+2	; 0x02
     842:	63 81       	ldd	r22, Z+3	; 0x03
     844:	e7 2f       	mov	r30, r23
     846:	f6 2f       	mov	r31, r22
     848:	30 97       	sbiw	r30, 0x00	; 0
     84a:	c1 f6       	brne	.-80     	; 0x7fc <malloc+0x20>
     84c:	41 15       	cp	r20, r1
     84e:	51 05       	cpc	r21, r1
     850:	01 f1       	breq	.+64     	; 0x892 <malloc+0xb6>
     852:	48 1b       	sub	r20, r24
     854:	59 0b       	sbc	r21, r25
     856:	44 30       	cpi	r20, 0x04	; 4
     858:	51 05       	cpc	r21, r1
     85a:	80 f4       	brcc	.+32     	; 0x87c <malloc+0xa0>
     85c:	12 96       	adiw	r26, 0x02	; 2
     85e:	8d 91       	ld	r24, X+
     860:	9c 91       	ld	r25, X
     862:	13 97       	sbiw	r26, 0x03	; 3
     864:	20 97       	sbiw	r28, 0x00	; 0
     866:	19 f0       	breq	.+6      	; 0x86e <malloc+0x92>
     868:	9b 83       	std	Y+3, r25	; 0x03
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	04 c0       	rjmp	.+8      	; 0x876 <malloc+0x9a>
     86e:	90 93 c8 01 	sts	0x01C8, r25
     872:	80 93 c7 01 	sts	0x01C7, r24
     876:	fd 01       	movw	r30, r26
     878:	32 96       	adiw	r30, 0x02	; 2
     87a:	46 c0       	rjmp	.+140    	; 0x908 <malloc+0x12c>
     87c:	fd 01       	movw	r30, r26
     87e:	e4 0f       	add	r30, r20
     880:	f5 1f       	adc	r31, r21
     882:	81 93       	st	Z+, r24
     884:	91 93       	st	Z+, r25
     886:	42 50       	subi	r20, 0x02	; 2
     888:	50 40       	sbci	r21, 0x00	; 0
     88a:	11 96       	adiw	r26, 0x01	; 1
     88c:	5c 93       	st	X, r21
     88e:	4e 93       	st	-X, r20
     890:	3b c0       	rjmp	.+118    	; 0x908 <malloc+0x12c>
     892:	20 91 c5 01 	lds	r18, 0x01C5
     896:	30 91 c6 01 	lds	r19, 0x01C6
     89a:	21 15       	cp	r18, r1
     89c:	31 05       	cpc	r19, r1
     89e:	41 f4       	brne	.+16     	; 0x8b0 <malloc+0xd4>
     8a0:	20 91 6b 01 	lds	r18, 0x016B
     8a4:	30 91 6c 01 	lds	r19, 0x016C
     8a8:	30 93 c6 01 	sts	0x01C6, r19
     8ac:	20 93 c5 01 	sts	0x01C5, r18
     8b0:	20 91 6d 01 	lds	r18, 0x016D
     8b4:	30 91 6e 01 	lds	r19, 0x016E
     8b8:	21 15       	cp	r18, r1
     8ba:	31 05       	cpc	r19, r1
     8bc:	41 f4       	brne	.+16     	; 0x8ce <malloc+0xf2>
     8be:	2d b7       	in	r18, 0x3d	; 61
     8c0:	3e b7       	in	r19, 0x3e	; 62
     8c2:	40 91 69 01 	lds	r20, 0x0169
     8c6:	50 91 6a 01 	lds	r21, 0x016A
     8ca:	24 1b       	sub	r18, r20
     8cc:	35 0b       	sbc	r19, r21
     8ce:	e0 91 c5 01 	lds	r30, 0x01C5
     8d2:	f0 91 c6 01 	lds	r31, 0x01C6
     8d6:	e2 17       	cp	r30, r18
     8d8:	f3 07       	cpc	r31, r19
     8da:	a0 f4       	brcc	.+40     	; 0x904 <malloc+0x128>
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	28 17       	cp	r18, r24
     8e2:	39 07       	cpc	r19, r25
     8e4:	78 f0       	brcs	.+30     	; 0x904 <malloc+0x128>
     8e6:	ac 01       	movw	r20, r24
     8e8:	4e 5f       	subi	r20, 0xFE	; 254
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	24 17       	cp	r18, r20
     8ee:	35 07       	cpc	r19, r21
     8f0:	48 f0       	brcs	.+18     	; 0x904 <malloc+0x128>
     8f2:	4e 0f       	add	r20, r30
     8f4:	5f 1f       	adc	r21, r31
     8f6:	50 93 c6 01 	sts	0x01C6, r21
     8fa:	40 93 c5 01 	sts	0x01C5, r20
     8fe:	81 93       	st	Z+, r24
     900:	91 93       	st	Z+, r25
     902:	02 c0       	rjmp	.+4      	; 0x908 <malloc+0x12c>
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	cf 01       	movw	r24, r30
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <free>:
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	09 f4       	brne	.+2      	; 0x91a <free+0xa>
     918:	91 c0       	rjmp	.+290    	; 0xa3c <free+0x12c>
     91a:	fc 01       	movw	r30, r24
     91c:	32 97       	sbiw	r30, 0x02	; 2
     91e:	13 82       	std	Z+3, r1	; 0x03
     920:	12 82       	std	Z+2, r1	; 0x02
     922:	60 91 c7 01 	lds	r22, 0x01C7
     926:	70 91 c8 01 	lds	r23, 0x01C8
     92a:	61 15       	cp	r22, r1
     92c:	71 05       	cpc	r23, r1
     92e:	81 f4       	brne	.+32     	; 0x950 <free+0x40>
     930:	20 81       	ld	r18, Z
     932:	31 81       	ldd	r19, Z+1	; 0x01
     934:	28 0f       	add	r18, r24
     936:	39 1f       	adc	r19, r25
     938:	80 91 c5 01 	lds	r24, 0x01C5
     93c:	90 91 c6 01 	lds	r25, 0x01C6
     940:	82 17       	cp	r24, r18
     942:	93 07       	cpc	r25, r19
     944:	99 f5       	brne	.+102    	; 0x9ac <free+0x9c>
     946:	f0 93 c6 01 	sts	0x01C6, r31
     94a:	e0 93 c5 01 	sts	0x01C5, r30
     94e:	76 c0       	rjmp	.+236    	; 0xa3c <free+0x12c>
     950:	db 01       	movw	r26, r22
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	02 c0       	rjmp	.+4      	; 0x95c <free+0x4c>
     958:	cd 01       	movw	r24, r26
     95a:	d9 01       	movw	r26, r18
     95c:	ae 17       	cp	r26, r30
     95e:	bf 07       	cpc	r27, r31
     960:	48 f4       	brcc	.+18     	; 0x974 <free+0x64>
     962:	12 96       	adiw	r26, 0x02	; 2
     964:	2d 91       	ld	r18, X+
     966:	3c 91       	ld	r19, X
     968:	13 97       	sbiw	r26, 0x03	; 3
     96a:	21 15       	cp	r18, r1
     96c:	31 05       	cpc	r19, r1
     96e:	a1 f7       	brne	.-24     	; 0x958 <free+0x48>
     970:	cd 01       	movw	r24, r26
     972:	21 c0       	rjmp	.+66     	; 0x9b6 <free+0xa6>
     974:	b3 83       	std	Z+3, r27	; 0x03
     976:	a2 83       	std	Z+2, r26	; 0x02
     978:	ef 01       	movw	r28, r30
     97a:	49 91       	ld	r20, Y+
     97c:	59 91       	ld	r21, Y+
     97e:	9e 01       	movw	r18, r28
     980:	24 0f       	add	r18, r20
     982:	35 1f       	adc	r19, r21
     984:	a2 17       	cp	r26, r18
     986:	b3 07       	cpc	r27, r19
     988:	79 f4       	brne	.+30     	; 0x9a8 <free+0x98>
     98a:	2d 91       	ld	r18, X+
     98c:	3c 91       	ld	r19, X
     98e:	11 97       	sbiw	r26, 0x01	; 1
     990:	24 0f       	add	r18, r20
     992:	35 1f       	adc	r19, r21
     994:	2e 5f       	subi	r18, 0xFE	; 254
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	31 83       	std	Z+1, r19	; 0x01
     99a:	20 83       	st	Z, r18
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	2d 91       	ld	r18, X+
     9a0:	3c 91       	ld	r19, X
     9a2:	13 97       	sbiw	r26, 0x03	; 3
     9a4:	33 83       	std	Z+3, r19	; 0x03
     9a6:	22 83       	std	Z+2, r18	; 0x02
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	29 f4       	brne	.+10     	; 0x9b6 <free+0xa6>
     9ac:	f0 93 c8 01 	sts	0x01C8, r31
     9b0:	e0 93 c7 01 	sts	0x01C7, r30
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <free+0x12c>
     9b6:	dc 01       	movw	r26, r24
     9b8:	13 96       	adiw	r26, 0x03	; 3
     9ba:	fc 93       	st	X, r31
     9bc:	ee 93       	st	-X, r30
     9be:	12 97       	sbiw	r26, 0x02	; 2
     9c0:	4d 91       	ld	r20, X+
     9c2:	5d 91       	ld	r21, X+
     9c4:	a4 0f       	add	r26, r20
     9c6:	b5 1f       	adc	r27, r21
     9c8:	ea 17       	cp	r30, r26
     9ca:	fb 07       	cpc	r31, r27
     9cc:	69 f4       	brne	.+26     	; 0x9e8 <free+0xd8>
     9ce:	20 81       	ld	r18, Z
     9d0:	31 81       	ldd	r19, Z+1	; 0x01
     9d2:	24 0f       	add	r18, r20
     9d4:	35 1f       	adc	r19, r21
     9d6:	2e 5f       	subi	r18, 0xFE	; 254
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	ec 01       	movw	r28, r24
     9dc:	39 83       	std	Y+1, r19	; 0x01
     9de:	28 83       	st	Y, r18
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	33 81       	ldd	r19, Z+3	; 0x03
     9e4:	3b 83       	std	Y+3, r19	; 0x03
     9e6:	2a 83       	std	Y+2, r18	; 0x02
     9e8:	e0 e0       	ldi	r30, 0x00	; 0
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <free+0xe2>
     9ee:	fb 01       	movw	r30, r22
     9f0:	bc 01       	movw	r22, r24
     9f2:	db 01       	movw	r26, r22
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8d 91       	ld	r24, X+
     9f8:	9c 91       	ld	r25, X
     9fa:	13 97       	sbiw	r26, 0x03	; 3
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	b9 f7       	brne	.-18     	; 0x9ee <free+0xde>
     a00:	9b 01       	movw	r18, r22
     a02:	2e 5f       	subi	r18, 0xFE	; 254
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	82 0f       	add	r24, r18
     a0e:	93 1f       	adc	r25, r19
     a10:	40 91 c5 01 	lds	r20, 0x01C5
     a14:	50 91 c6 01 	lds	r21, 0x01C6
     a18:	48 17       	cp	r20, r24
     a1a:	59 07       	cpc	r21, r25
     a1c:	79 f4       	brne	.+30     	; 0xa3c <free+0x12c>
     a1e:	30 97       	sbiw	r30, 0x00	; 0
     a20:	29 f4       	brne	.+10     	; 0xa2c <free+0x11c>
     a22:	10 92 c8 01 	sts	0x01C8, r1
     a26:	10 92 c7 01 	sts	0x01C7, r1
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <free+0x120>
     a2c:	13 82       	std	Z+3, r1	; 0x03
     a2e:	12 82       	std	Z+2, r1	; 0x02
     a30:	22 50       	subi	r18, 0x02	; 2
     a32:	30 40       	sbci	r19, 0x00	; 0
     a34:	30 93 c6 01 	sts	0x01C6, r19
     a38:	20 93 c5 01 	sts	0x01C5, r18
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <fprintf>:
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e7 e2       	ldi	r30, 0x27	; 39
     a48:	f5 e0       	ldi	r31, 0x05	; 5
     a4a:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__prologue_saves__+0x20>
     a4e:	9e 01       	movw	r18, r28
     a50:	27 5f       	subi	r18, 0xF7	; 247
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	8d 81       	ldd	r24, Y+5	; 0x05
     a56:	9e 81       	ldd	r25, Y+6	; 0x06
     a58:	6f 81       	ldd	r22, Y+7	; 0x07
     a5a:	78 85       	ldd	r23, Y+8	; 0x08
     a5c:	a9 01       	movw	r20, r18
     a5e:	0e 94 59 05 	call	0xab2	; 0xab2 <vfprintf>
     a62:	20 96       	adiw	r28, 0x00	; 0
     a64:	e2 e0       	ldi	r30, 0x02	; 2
     a66:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__epilogue_restores__+0x20>

00000a6a <fputs>:
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	7c 01       	movw	r14, r24
     a78:	eb 01       	movw	r28, r22
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	81 ff       	sbrs	r24, 1
     a7e:	11 c0       	rjmp	.+34     	; 0xaa2 <fputs+0x38>
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	08 c0       	rjmp	.+16     	; 0xa96 <fputs+0x2c>
     a86:	e8 85       	ldd	r30, Y+8	; 0x08
     a88:	f9 85       	ldd	r31, Y+9	; 0x09
     a8a:	be 01       	movw	r22, r28
     a8c:	09 95       	icall
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	11 f0       	breq	.+4      	; 0xa96 <fputs+0x2c>
     a92:	0f ef       	ldi	r16, 0xFF	; 255
     a94:	1f ef       	ldi	r17, 0xFF	; 255
     a96:	f7 01       	movw	r30, r14
     a98:	81 91       	ld	r24, Z+
     a9a:	7f 01       	movw	r14, r30
     a9c:	88 23       	and	r24, r24
     a9e:	99 f7       	brne	.-26     	; 0xa86 <fputs+0x1c>
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <fputs+0x3c>
     aa2:	0f ef       	ldi	r16, 0xFF	; 255
     aa4:	1f ef       	ldi	r17, 0xFF	; 255
     aa6:	c8 01       	movw	r24, r16
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	e6 e0       	ldi	r30, 0x06	; 6
     aae:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__epilogue_restores__+0x18>

00000ab2 <vfprintf>:
     ab2:	ac e0       	ldi	r26, 0x0C	; 12
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	ef e5       	ldi	r30, 0x5F	; 95
     ab8:	f5 e0       	ldi	r31, 0x05	; 5
     aba:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__prologue_saves__>
     abe:	6c 01       	movw	r12, r24
     ac0:	1b 01       	movw	r2, r22
     ac2:	8a 01       	movw	r16, r20
     ac4:	fc 01       	movw	r30, r24
     ac6:	17 82       	std	Z+7, r1	; 0x07
     ac8:	16 82       	std	Z+6, r1	; 0x06
     aca:	83 81       	ldd	r24, Z+3	; 0x03
     acc:	81 ff       	sbrs	r24, 1
     ace:	d1 c1       	rjmp	.+930    	; 0xe72 <vfprintf+0x3c0>
     ad0:	2e 01       	movw	r4, r28
     ad2:	08 94       	sec
     ad4:	41 1c       	adc	r4, r1
     ad6:	51 1c       	adc	r5, r1
     ad8:	f6 01       	movw	r30, r12
     ada:	93 81       	ldd	r25, Z+3	; 0x03
     adc:	f1 01       	movw	r30, r2
     ade:	93 fd       	sbrc	r25, 3
     ae0:	85 91       	lpm	r24, Z+
     ae2:	93 ff       	sbrs	r25, 3
     ae4:	81 91       	ld	r24, Z+
     ae6:	1f 01       	movw	r2, r30
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <vfprintf+0x3c>
     aec:	be c1       	rjmp	.+892    	; 0xe6a <vfprintf+0x3b8>
     aee:	85 32       	cpi	r24, 0x25	; 37
     af0:	39 f4       	brne	.+14     	; 0xb00 <vfprintf+0x4e>
     af2:	93 fd       	sbrc	r25, 3
     af4:	85 91       	lpm	r24, Z+
     af6:	93 ff       	sbrs	r25, 3
     af8:	81 91       	ld	r24, Z+
     afa:	1f 01       	movw	r2, r30
     afc:	85 32       	cpi	r24, 0x25	; 37
     afe:	29 f4       	brne	.+10     	; 0xb0a <vfprintf+0x58>
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	b6 01       	movw	r22, r12
     b04:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     b08:	e7 cf       	rjmp	.-50     	; 0xad8 <vfprintf+0x26>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	20 32       	cpi	r18, 0x20	; 32
     b12:	b0 f4       	brcc	.+44     	; 0xb40 <vfprintf+0x8e>
     b14:	8b 32       	cpi	r24, 0x2B	; 43
     b16:	69 f0       	breq	.+26     	; 0xb32 <vfprintf+0x80>
     b18:	8c 32       	cpi	r24, 0x2C	; 44
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <vfprintf+0x74>
     b1c:	80 32       	cpi	r24, 0x20	; 32
     b1e:	51 f0       	breq	.+20     	; 0xb34 <vfprintf+0x82>
     b20:	83 32       	cpi	r24, 0x23	; 35
     b22:	71 f4       	brne	.+28     	; 0xb40 <vfprintf+0x8e>
     b24:	0b c0       	rjmp	.+22     	; 0xb3c <vfprintf+0x8a>
     b26:	8d 32       	cpi	r24, 0x2D	; 45
     b28:	39 f0       	breq	.+14     	; 0xb38 <vfprintf+0x86>
     b2a:	80 33       	cpi	r24, 0x30	; 48
     b2c:	49 f4       	brne	.+18     	; 0xb40 <vfprintf+0x8e>
     b2e:	21 60       	ori	r18, 0x01	; 1
     b30:	2c c0       	rjmp	.+88     	; 0xb8a <vfprintf+0xd8>
     b32:	22 60       	ori	r18, 0x02	; 2
     b34:	24 60       	ori	r18, 0x04	; 4
     b36:	29 c0       	rjmp	.+82     	; 0xb8a <vfprintf+0xd8>
     b38:	28 60       	ori	r18, 0x08	; 8
     b3a:	27 c0       	rjmp	.+78     	; 0xb8a <vfprintf+0xd8>
     b3c:	20 61       	ori	r18, 0x10	; 16
     b3e:	25 c0       	rjmp	.+74     	; 0xb8a <vfprintf+0xd8>
     b40:	27 fd       	sbrc	r18, 7
     b42:	2c c0       	rjmp	.+88     	; 0xb9c <vfprintf+0xea>
     b44:	38 2f       	mov	r19, r24
     b46:	30 53       	subi	r19, 0x30	; 48
     b48:	3a 30       	cpi	r19, 0x0A	; 10
     b4a:	98 f4       	brcc	.+38     	; 0xb72 <vfprintf+0xc0>
     b4c:	26 ff       	sbrs	r18, 6
     b4e:	08 c0       	rjmp	.+16     	; 0xb60 <vfprintf+0xae>
     b50:	8e 2d       	mov	r24, r14
     b52:	88 0f       	add	r24, r24
     b54:	e8 2e       	mov	r14, r24
     b56:	ee 0c       	add	r14, r14
     b58:	ee 0c       	add	r14, r14
     b5a:	e8 0e       	add	r14, r24
     b5c:	e3 0e       	add	r14, r19
     b5e:	15 c0       	rjmp	.+42     	; 0xb8a <vfprintf+0xd8>
     b60:	8f 2d       	mov	r24, r15
     b62:	88 0f       	add	r24, r24
     b64:	f8 2e       	mov	r15, r24
     b66:	ff 0c       	add	r15, r15
     b68:	ff 0c       	add	r15, r15
     b6a:	f8 0e       	add	r15, r24
     b6c:	f3 0e       	add	r15, r19
     b6e:	20 62       	ori	r18, 0x20	; 32
     b70:	0c c0       	rjmp	.+24     	; 0xb8a <vfprintf+0xd8>
     b72:	8e 32       	cpi	r24, 0x2E	; 46
     b74:	21 f4       	brne	.+8      	; 0xb7e <vfprintf+0xcc>
     b76:	26 fd       	sbrc	r18, 6
     b78:	78 c1       	rjmp	.+752    	; 0xe6a <vfprintf+0x3b8>
     b7a:	20 64       	ori	r18, 0x40	; 64
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <vfprintf+0xd8>
     b7e:	8c 36       	cpi	r24, 0x6C	; 108
     b80:	11 f4       	brne	.+4      	; 0xb86 <vfprintf+0xd4>
     b82:	20 68       	ori	r18, 0x80	; 128
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0xd8>
     b86:	88 36       	cpi	r24, 0x68	; 104
     b88:	49 f4       	brne	.+18     	; 0xb9c <vfprintf+0xea>
     b8a:	f1 01       	movw	r30, r2
     b8c:	93 fd       	sbrc	r25, 3
     b8e:	85 91       	lpm	r24, Z+
     b90:	93 ff       	sbrs	r25, 3
     b92:	81 91       	ld	r24, Z+
     b94:	1f 01       	movw	r2, r30
     b96:	88 23       	and	r24, r24
     b98:	09 f0       	breq	.+2      	; 0xb9c <vfprintf+0xea>
     b9a:	ba cf       	rjmp	.-140    	; 0xb10 <vfprintf+0x5e>
     b9c:	98 2f       	mov	r25, r24
     b9e:	95 54       	subi	r25, 0x45	; 69
     ba0:	93 30       	cpi	r25, 0x03	; 3
     ba2:	18 f0       	brcs	.+6      	; 0xbaa <vfprintf+0xf8>
     ba4:	90 52       	subi	r25, 0x20	; 32
     ba6:	93 30       	cpi	r25, 0x03	; 3
     ba8:	28 f4       	brcc	.+10     	; 0xbb4 <vfprintf+0x102>
     baa:	0c 5f       	subi	r16, 0xFC	; 252
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
     bae:	ff e3       	ldi	r31, 0x3F	; 63
     bb0:	f9 83       	std	Y+1, r31	; 0x01
     bb2:	0d c0       	rjmp	.+26     	; 0xbce <vfprintf+0x11c>
     bb4:	83 36       	cpi	r24, 0x63	; 99
     bb6:	31 f0       	breq	.+12     	; 0xbc4 <vfprintf+0x112>
     bb8:	83 37       	cpi	r24, 0x73	; 115
     bba:	71 f0       	breq	.+28     	; 0xbd8 <vfprintf+0x126>
     bbc:	83 35       	cpi	r24, 0x53	; 83
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <vfprintf+0x110>
     bc0:	60 c0       	rjmp	.+192    	; 0xc82 <vfprintf+0x1d0>
     bc2:	22 c0       	rjmp	.+68     	; 0xc08 <vfprintf+0x156>
     bc4:	f8 01       	movw	r30, r16
     bc6:	80 81       	ld	r24, Z
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	0e 5f       	subi	r16, 0xFE	; 254
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	42 01       	movw	r8, r4
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	a7 2e       	mov	r10, r23
     bd4:	b1 2c       	mov	r11, r1
     bd6:	16 c0       	rjmp	.+44     	; 0xc04 <vfprintf+0x152>
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	66 2e       	mov	r6, r22
     bdc:	71 2c       	mov	r7, r1
     bde:	60 0e       	add	r6, r16
     be0:	71 1e       	adc	r7, r17
     be2:	f8 01       	movw	r30, r16
     be4:	80 80       	ld	r8, Z
     be6:	91 80       	ldd	r9, Z+1	; 0x01
     be8:	26 ff       	sbrs	r18, 6
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x140>
     bec:	6e 2d       	mov	r22, r14
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x144>
     bf2:	6f ef       	ldi	r22, 0xFF	; 255
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	c4 01       	movw	r24, r8
     bf8:	2c 87       	std	Y+12, r18	; 0x0c
     bfa:	0e 94 4b 07 	call	0xe96	; 0xe96 <strnlen>
     bfe:	5c 01       	movw	r10, r24
     c00:	83 01       	movw	r16, r6
     c02:	2c 85       	ldd	r18, Y+12	; 0x0c
     c04:	2f 77       	andi	r18, 0x7F	; 127
     c06:	17 c0       	rjmp	.+46     	; 0xc36 <vfprintf+0x184>
     c08:	52 e0       	ldi	r21, 0x02	; 2
     c0a:	65 2e       	mov	r6, r21
     c0c:	71 2c       	mov	r7, r1
     c0e:	60 0e       	add	r6, r16
     c10:	71 1e       	adc	r7, r17
     c12:	f8 01       	movw	r30, r16
     c14:	80 80       	ld	r8, Z
     c16:	91 80       	ldd	r9, Z+1	; 0x01
     c18:	26 ff       	sbrs	r18, 6
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <vfprintf+0x170>
     c1c:	6e 2d       	mov	r22, r14
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x174>
     c22:	6f ef       	ldi	r22, 0xFF	; 255
     c24:	7f ef       	ldi	r23, 0xFF	; 255
     c26:	c4 01       	movw	r24, r8
     c28:	2c 87       	std	Y+12, r18	; 0x0c
     c2a:	0e 94 40 07 	call	0xe80	; 0xe80 <strnlen_P>
     c2e:	5c 01       	movw	r10, r24
     c30:	2c 85       	ldd	r18, Y+12	; 0x0c
     c32:	20 68       	ori	r18, 0x80	; 128
     c34:	83 01       	movw	r16, r6
     c36:	23 fd       	sbrc	r18, 3
     c38:	20 c0       	rjmp	.+64     	; 0xc7a <vfprintf+0x1c8>
     c3a:	08 c0       	rjmp	.+16     	; 0xc4c <vfprintf+0x19a>
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	b6 01       	movw	r22, r12
     c42:	2c 87       	std	Y+12, r18	; 0x0c
     c44:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     c48:	fa 94       	dec	r15
     c4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c4c:	8f 2d       	mov	r24, r15
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a8 16       	cp	r10, r24
     c52:	b9 06       	cpc	r11, r25
     c54:	98 f3       	brcs	.-26     	; 0xc3c <vfprintf+0x18a>
     c56:	11 c0       	rjmp	.+34     	; 0xc7a <vfprintf+0x1c8>
     c58:	f4 01       	movw	r30, r8
     c5a:	27 fd       	sbrc	r18, 7
     c5c:	85 91       	lpm	r24, Z+
     c5e:	27 ff       	sbrs	r18, 7
     c60:	81 91       	ld	r24, Z+
     c62:	4f 01       	movw	r8, r30
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	b6 01       	movw	r22, r12
     c68:	2c 87       	std	Y+12, r18	; 0x0c
     c6a:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     c6e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c70:	f1 10       	cpse	r15, r1
     c72:	fa 94       	dec	r15
     c74:	08 94       	sec
     c76:	a1 08       	sbc	r10, r1
     c78:	b1 08       	sbc	r11, r1
     c7a:	a1 14       	cp	r10, r1
     c7c:	b1 04       	cpc	r11, r1
     c7e:	61 f7       	brne	.-40     	; 0xc58 <vfprintf+0x1a6>
     c80:	f1 c0       	rjmp	.+482    	; 0xe64 <vfprintf+0x3b2>
     c82:	84 36       	cpi	r24, 0x64	; 100
     c84:	11 f0       	breq	.+4      	; 0xc8a <vfprintf+0x1d8>
     c86:	89 36       	cpi	r24, 0x69	; 105
     c88:	49 f5       	brne	.+82     	; 0xcdc <vfprintf+0x22a>
     c8a:	27 ff       	sbrs	r18, 7
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <vfprintf+0x1ec>
     c8e:	f8 01       	movw	r30, r16
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	0c 5f       	subi	r16, 0xFC	; 252
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <vfprintf+0x1fe>
     c9e:	f8 01       	movw	r30, r16
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	88 27       	eor	r24, r24
     ca6:	77 fd       	sbrc	r23, 7
     ca8:	80 95       	com	r24
     caa:	98 2f       	mov	r25, r24
     cac:	0e 5f       	subi	r16, 0xFE	; 254
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	4f e6       	ldi	r20, 0x6F	; 111
     cb2:	b4 2e       	mov	r11, r20
     cb4:	b2 22       	and	r11, r18
     cb6:	97 ff       	sbrs	r25, 7
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <vfprintf+0x21a>
     cba:	90 95       	com	r25
     cbc:	80 95       	com	r24
     cbe:	70 95       	com	r23
     cc0:	61 95       	neg	r22
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	f0 e8       	ldi	r31, 0x80	; 128
     cca:	bf 2a       	or	r11, r31
     ccc:	a2 01       	movw	r20, r4
     cce:	2a e0       	ldi	r18, 0x0A	; 10
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	0e 94 82 07 	call	0xf04	; 0xf04 <__ultoa_invert>
     cd6:	78 2e       	mov	r7, r24
     cd8:	74 18       	sub	r7, r4
     cda:	45 c0       	rjmp	.+138    	; 0xd66 <vfprintf+0x2b4>
     cdc:	85 37       	cpi	r24, 0x75	; 117
     cde:	31 f4       	brne	.+12     	; 0xcec <vfprintf+0x23a>
     ce0:	3f ee       	ldi	r19, 0xEF	; 239
     ce2:	b3 2e       	mov	r11, r19
     ce4:	b2 22       	and	r11, r18
     ce6:	2a e0       	ldi	r18, 0x0A	; 10
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	25 c0       	rjmp	.+74     	; 0xd36 <vfprintf+0x284>
     cec:	99 ef       	ldi	r25, 0xF9	; 249
     cee:	b9 2e       	mov	r11, r25
     cf0:	b2 22       	and	r11, r18
     cf2:	8f 36       	cpi	r24, 0x6F	; 111
     cf4:	c1 f0       	breq	.+48     	; 0xd26 <vfprintf+0x274>
     cf6:	80 37       	cpi	r24, 0x70	; 112
     cf8:	20 f4       	brcc	.+8      	; 0xd02 <vfprintf+0x250>
     cfa:	88 35       	cpi	r24, 0x58	; 88
     cfc:	09 f0       	breq	.+2      	; 0xd00 <vfprintf+0x24e>
     cfe:	b5 c0       	rjmp	.+362    	; 0xe6a <vfprintf+0x3b8>
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <vfprintf+0x26a>
     d02:	80 37       	cpi	r24, 0x70	; 112
     d04:	21 f0       	breq	.+8      	; 0xd0e <vfprintf+0x25c>
     d06:	88 37       	cpi	r24, 0x78	; 120
     d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0x25a>
     d0a:	af c0       	rjmp	.+350    	; 0xe6a <vfprintf+0x3b8>
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x260>
     d0e:	20 e1       	ldi	r18, 0x10	; 16
     d10:	b2 2a       	or	r11, r18
     d12:	b4 fe       	sbrs	r11, 4
     d14:	0b c0       	rjmp	.+22     	; 0xd2c <vfprintf+0x27a>
     d16:	84 e0       	ldi	r24, 0x04	; 4
     d18:	b8 2a       	or	r11, r24
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <vfprintf+0x27a>
     d1c:	b4 fe       	sbrs	r11, 4
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x280>
     d20:	e6 e0       	ldi	r30, 0x06	; 6
     d22:	be 2a       	or	r11, r30
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <vfprintf+0x280>
     d26:	28 e0       	ldi	r18, 0x08	; 8
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <vfprintf+0x284>
     d2c:	20 e1       	ldi	r18, 0x10	; 16
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <vfprintf+0x284>
     d32:	20 e1       	ldi	r18, 0x10	; 16
     d34:	32 e0       	ldi	r19, 0x02	; 2
     d36:	b7 fe       	sbrs	r11, 7
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <vfprintf+0x298>
     d3a:	f8 01       	movw	r30, r16
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	0c 5f       	subi	r16, 0xFC	; 252
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <vfprintf+0x2a6>
     d4a:	f8 01       	movw	r30, r16
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 5f       	subi	r16, 0xFE	; 254
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	a2 01       	movw	r20, r4
     d5a:	0e 94 82 07 	call	0xf04	; 0xf04 <__ultoa_invert>
     d5e:	78 2e       	mov	r7, r24
     d60:	74 18       	sub	r7, r4
     d62:	ff e7       	ldi	r31, 0x7F	; 127
     d64:	bf 22       	and	r11, r31
     d66:	b6 fe       	sbrs	r11, 6
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <vfprintf+0x2ce>
     d6a:	2e ef       	ldi	r18, 0xFE	; 254
     d6c:	b2 22       	and	r11, r18
     d6e:	7e 14       	cp	r7, r14
     d70:	38 f4       	brcc	.+14     	; 0xd80 <vfprintf+0x2ce>
     d72:	b4 fe       	sbrs	r11, 4
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <vfprintf+0x2d2>
     d76:	b2 fc       	sbrc	r11, 2
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <vfprintf+0x2d2>
     d7a:	8f ee       	ldi	r24, 0xEF	; 239
     d7c:	b8 22       	and	r11, r24
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x2d2>
     d80:	a7 2c       	mov	r10, r7
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <vfprintf+0x2d4>
     d84:	ae 2c       	mov	r10, r14
     d86:	8b 2d       	mov	r24, r11
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	b4 fe       	sbrs	r11, 4
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x2f6>
     d8e:	fe 01       	movw	r30, r28
     d90:	e7 0d       	add	r30, r7
     d92:	f1 1d       	adc	r31, r1
     d94:	20 81       	ld	r18, Z
     d96:	20 33       	cpi	r18, 0x30	; 48
     d98:	19 f4       	brne	.+6      	; 0xda0 <vfprintf+0x2ee>
     d9a:	e9 ee       	ldi	r30, 0xE9	; 233
     d9c:	be 22       	and	r11, r30
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <vfprintf+0x300>
     da0:	a3 94       	inc	r10
     da2:	b2 fe       	sbrs	r11, 2
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0x300>
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <vfprintf+0x2fe>
     da8:	86 78       	andi	r24, 0x86	; 134
     daa:	90 70       	andi	r25, 0x00	; 0
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	09 f0       	breq	.+2      	; 0xdb2 <vfprintf+0x300>
     db0:	a3 94       	inc	r10
     db2:	8b 2c       	mov	r8, r11
     db4:	99 24       	eor	r9, r9
     db6:	b3 fc       	sbrc	r11, 3
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <vfprintf+0x330>
     dba:	b0 fe       	sbrs	r11, 0
     dbc:	0f c0       	rjmp	.+30     	; 0xddc <vfprintf+0x32a>
     dbe:	af 14       	cp	r10, r15
     dc0:	28 f4       	brcc	.+10     	; 0xdcc <vfprintf+0x31a>
     dc2:	e7 2c       	mov	r14, r7
     dc4:	ef 0c       	add	r14, r15
     dc6:	ea 18       	sub	r14, r10
     dc8:	af 2c       	mov	r10, r15
     dca:	08 c0       	rjmp	.+16     	; 0xddc <vfprintf+0x32a>
     dcc:	e7 2c       	mov	r14, r7
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0x32a>
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	b6 01       	movw	r22, r12
     dd6:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     dda:	a3 94       	inc	r10
     ddc:	af 14       	cp	r10, r15
     dde:	c0 f3       	brcs	.-16     	; 0xdd0 <vfprintf+0x31e>
     de0:	04 c0       	rjmp	.+8      	; 0xdea <vfprintf+0x338>
     de2:	af 14       	cp	r10, r15
     de4:	10 f4       	brcc	.+4      	; 0xdea <vfprintf+0x338>
     de6:	fa 18       	sub	r15, r10
     de8:	01 c0       	rjmp	.+2      	; 0xdec <vfprintf+0x33a>
     dea:	ff 24       	eor	r15, r15
     dec:	84 fe       	sbrs	r8, 4
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <vfprintf+0x35c>
     df0:	80 e3       	ldi	r24, 0x30	; 48
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	b6 01       	movw	r22, r12
     df6:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     dfa:	82 fe       	sbrs	r8, 2
     dfc:	1f c0       	rjmp	.+62     	; 0xe3c <vfprintf+0x38a>
     dfe:	81 fe       	sbrs	r8, 1
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x356>
     e02:	88 e5       	ldi	r24, 0x58	; 88
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	10 c0       	rjmp	.+32     	; 0xe28 <vfprintf+0x376>
     e08:	88 e7       	ldi	r24, 0x78	; 120
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <vfprintf+0x376>
     e0e:	c4 01       	movw	r24, r8
     e10:	86 78       	andi	r24, 0x86	; 134
     e12:	90 70       	andi	r25, 0x00	; 0
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	91 f0       	breq	.+36     	; 0xe3c <vfprintf+0x38a>
     e18:	81 fc       	sbrc	r8, 1
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <vfprintf+0x36e>
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <vfprintf+0x370>
     e20:	8b e2       	ldi	r24, 0x2B	; 43
     e22:	b7 fc       	sbrc	r11, 7
     e24:	8d e2       	ldi	r24, 0x2D	; 45
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	b6 01       	movw	r22, r12
     e2a:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0x38a>
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	b6 01       	movw	r22, r12
     e36:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     e3a:	ea 94       	dec	r14
     e3c:	7e 14       	cp	r7, r14
     e3e:	c0 f3       	brcs	.-16     	; 0xe30 <vfprintf+0x37e>
     e40:	7a 94       	dec	r7
     e42:	f2 01       	movw	r30, r4
     e44:	e7 0d       	add	r30, r7
     e46:	f1 1d       	adc	r31, r1
     e48:	80 81       	ld	r24, Z
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	b6 01       	movw	r22, r12
     e4e:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     e52:	77 20       	and	r7, r7
     e54:	a9 f7       	brne	.-22     	; 0xe40 <vfprintf+0x38e>
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0x3b2>
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	b6 01       	movw	r22, r12
     e5e:	0e 94 56 07 	call	0xeac	; 0xeac <fputc>
     e62:	fa 94       	dec	r15
     e64:	ff 20       	and	r15, r15
     e66:	c1 f7       	brne	.-16     	; 0xe58 <vfprintf+0x3a6>
     e68:	37 ce       	rjmp	.-914    	; 0xad8 <vfprintf+0x26>
     e6a:	f6 01       	movw	r30, r12
     e6c:	26 81       	ldd	r18, Z+6	; 0x06
     e6e:	37 81       	ldd	r19, Z+7	; 0x07
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <vfprintf+0x3c4>
     e72:	2f ef       	ldi	r18, 0xFF	; 255
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	c9 01       	movw	r24, r18
     e78:	2c 96       	adiw	r28, 0x0c	; 12
     e7a:	e2 e1       	ldi	r30, 0x12	; 18
     e7c:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__epilogue_restores__>

00000e80 <strnlen_P>:
     e80:	fc 01       	movw	r30, r24
     e82:	05 90       	lpm	r0, Z+
     e84:	61 50       	subi	r22, 0x01	; 1
     e86:	70 40       	sbci	r23, 0x00	; 0
     e88:	01 10       	cpse	r0, r1
     e8a:	d8 f7       	brcc	.-10     	; 0xe82 <strnlen_P+0x2>
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	8e 0f       	add	r24, r30
     e92:	9f 1f       	adc	r25, r31
     e94:	08 95       	ret

00000e96 <strnlen>:
     e96:	fc 01       	movw	r30, r24
     e98:	61 50       	subi	r22, 0x01	; 1
     e9a:	70 40       	sbci	r23, 0x00	; 0
     e9c:	01 90       	ld	r0, Z+
     e9e:	01 10       	cpse	r0, r1
     ea0:	d8 f7       	brcc	.-10     	; 0xe98 <strnlen+0x2>
     ea2:	80 95       	com	r24
     ea4:	90 95       	com	r25
     ea6:	8e 0f       	add	r24, r30
     ea8:	9f 1f       	adc	r25, r31
     eaa:	08 95       	ret

00000eac <fputc>:
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	8c 01       	movw	r16, r24
     eb6:	eb 01       	movw	r28, r22
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	81 ff       	sbrs	r24, 1
     ebc:	1b c0       	rjmp	.+54     	; 0xef4 <fputc+0x48>
     ebe:	82 ff       	sbrs	r24, 2
     ec0:	0d c0       	rjmp	.+26     	; 0xedc <fputc+0x30>
     ec2:	2e 81       	ldd	r18, Y+6	; 0x06
     ec4:	3f 81       	ldd	r19, Y+7	; 0x07
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	64 f4       	brge	.+24     	; 0xee8 <fputc+0x3c>
     ed0:	e8 81       	ld	r30, Y
     ed2:	f9 81       	ldd	r31, Y+1	; 0x01
     ed4:	01 93       	st	Z+, r16
     ed6:	f9 83       	std	Y+1, r31	; 0x01
     ed8:	e8 83       	st	Y, r30
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <fputc+0x3c>
     edc:	e8 85       	ldd	r30, Y+8	; 0x08
     ede:	f9 85       	ldd	r31, Y+9	; 0x09
     ee0:	80 2f       	mov	r24, r16
     ee2:	09 95       	icall
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	31 f4       	brne	.+12     	; 0xef4 <fputc+0x48>
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <fputc+0x4c>
     ef4:	0f ef       	ldi	r16, 0xFF	; 255
     ef6:	1f ef       	ldi	r17, 0xFF	; 255
     ef8:	c8 01       	movw	r24, r16
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <__ultoa_invert>:
     f04:	fa 01       	movw	r30, r20
     f06:	aa 27       	eor	r26, r26
     f08:	28 30       	cpi	r18, 0x08	; 8
     f0a:	51 f1       	breq	.+84     	; 0xf60 <__ultoa_invert+0x5c>
     f0c:	20 31       	cpi	r18, 0x10	; 16
     f0e:	81 f1       	breq	.+96     	; 0xf70 <__ultoa_invert+0x6c>
     f10:	e8 94       	clt
     f12:	6f 93       	push	r22
     f14:	6e 7f       	andi	r22, 0xFE	; 254
     f16:	6e 5f       	subi	r22, 0xFE	; 254
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	af 4f       	sbci	r26, 0xFF	; 255
     f20:	b1 e0       	ldi	r27, 0x01	; 1
     f22:	3e d0       	rcall	.+124    	; 0xfa0 <__ultoa_invert+0x9c>
     f24:	b4 e0       	ldi	r27, 0x04	; 4
     f26:	3c d0       	rcall	.+120    	; 0xfa0 <__ultoa_invert+0x9c>
     f28:	67 0f       	add	r22, r23
     f2a:	78 1f       	adc	r23, r24
     f2c:	89 1f       	adc	r24, r25
     f2e:	9a 1f       	adc	r25, r26
     f30:	a1 1d       	adc	r26, r1
     f32:	68 0f       	add	r22, r24
     f34:	79 1f       	adc	r23, r25
     f36:	8a 1f       	adc	r24, r26
     f38:	91 1d       	adc	r25, r1
     f3a:	a1 1d       	adc	r26, r1
     f3c:	6a 0f       	add	r22, r26
     f3e:	71 1d       	adc	r23, r1
     f40:	81 1d       	adc	r24, r1
     f42:	91 1d       	adc	r25, r1
     f44:	a1 1d       	adc	r26, r1
     f46:	20 d0       	rcall	.+64     	; 0xf88 <__ultoa_invert+0x84>
     f48:	09 f4       	brne	.+2      	; 0xf4c <__ultoa_invert+0x48>
     f4a:	68 94       	set
     f4c:	3f 91       	pop	r19
     f4e:	2a e0       	ldi	r18, 0x0A	; 10
     f50:	26 9f       	mul	r18, r22
     f52:	11 24       	eor	r1, r1
     f54:	30 19       	sub	r19, r0
     f56:	30 5d       	subi	r19, 0xD0	; 208
     f58:	31 93       	st	Z+, r19
     f5a:	de f6       	brtc	.-74     	; 0xf12 <__ultoa_invert+0xe>
     f5c:	cf 01       	movw	r24, r30
     f5e:	08 95       	ret
     f60:	46 2f       	mov	r20, r22
     f62:	47 70       	andi	r20, 0x07	; 7
     f64:	40 5d       	subi	r20, 0xD0	; 208
     f66:	41 93       	st	Z+, r20
     f68:	b3 e0       	ldi	r27, 0x03	; 3
     f6a:	0f d0       	rcall	.+30     	; 0xf8a <__ultoa_invert+0x86>
     f6c:	c9 f7       	brne	.-14     	; 0xf60 <__ultoa_invert+0x5c>
     f6e:	f6 cf       	rjmp	.-20     	; 0xf5c <__ultoa_invert+0x58>
     f70:	46 2f       	mov	r20, r22
     f72:	4f 70       	andi	r20, 0x0F	; 15
     f74:	40 5d       	subi	r20, 0xD0	; 208
     f76:	4a 33       	cpi	r20, 0x3A	; 58
     f78:	18 f0       	brcs	.+6      	; 0xf80 <__ultoa_invert+0x7c>
     f7a:	49 5d       	subi	r20, 0xD9	; 217
     f7c:	31 fd       	sbrc	r19, 1
     f7e:	40 52       	subi	r20, 0x20	; 32
     f80:	41 93       	st	Z+, r20
     f82:	02 d0       	rcall	.+4      	; 0xf88 <__ultoa_invert+0x84>
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__ultoa_invert+0x6c>
     f86:	ea cf       	rjmp	.-44     	; 0xf5c <__ultoa_invert+0x58>
     f88:	b4 e0       	ldi	r27, 0x04	; 4
     f8a:	a6 95       	lsr	r26
     f8c:	97 95       	ror	r25
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	ba 95       	dec	r27
     f96:	c9 f7       	brne	.-14     	; 0xf8a <__ultoa_invert+0x86>
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	61 05       	cpc	r22, r1
     f9c:	71 05       	cpc	r23, r1
     f9e:	08 95       	ret
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	0a 2e       	mov	r0, r26
     fa6:	06 94       	lsr	r0
     fa8:	57 95       	ror	r21
     faa:	47 95       	ror	r20
     fac:	37 95       	ror	r19
     fae:	27 95       	ror	r18
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__ultoa_invert+0xa2>
     fb4:	62 0f       	add	r22, r18
     fb6:	73 1f       	adc	r23, r19
     fb8:	84 1f       	adc	r24, r20
     fba:	95 1f       	adc	r25, r21
     fbc:	a0 1d       	adc	r26, r0
     fbe:	08 95       	ret

00000fc0 <__prologue_saves__>:
     fc0:	2f 92       	push	r2
     fc2:	3f 92       	push	r3
     fc4:	4f 92       	push	r4
     fc6:	5f 92       	push	r5
     fc8:	6f 92       	push	r6
     fca:	7f 92       	push	r7
     fcc:	8f 92       	push	r8
     fce:	9f 92       	push	r9
     fd0:	af 92       	push	r10
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	ca 1b       	sub	r28, r26
     fea:	db 0b       	sbc	r29, r27
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	09 94       	ijmp

00000ff8 <__epilogue_restores__>:
     ff8:	2a 88       	ldd	r2, Y+18	; 0x12
     ffa:	39 88       	ldd	r3, Y+17	; 0x11
     ffc:	48 88       	ldd	r4, Y+16	; 0x10
     ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1000:	6e 84       	ldd	r6, Y+14	; 0x0e
    1002:	7d 84       	ldd	r7, Y+13	; 0x0d
    1004:	8c 84       	ldd	r8, Y+12	; 0x0c
    1006:	9b 84       	ldd	r9, Y+11	; 0x0b
    1008:	aa 84       	ldd	r10, Y+10	; 0x0a
    100a:	b9 84       	ldd	r11, Y+9	; 0x09
    100c:	c8 84       	ldd	r12, Y+8	; 0x08
    100e:	df 80       	ldd	r13, Y+7	; 0x07
    1010:	ee 80       	ldd	r14, Y+6	; 0x06
    1012:	fd 80       	ldd	r15, Y+5	; 0x05
    1014:	0c 81       	ldd	r16, Y+4	; 0x04
    1016:	1b 81       	ldd	r17, Y+3	; 0x03
    1018:	aa 81       	ldd	r26, Y+2	; 0x02
    101a:	b9 81       	ldd	r27, Y+1	; 0x01
    101c:	ce 0f       	add	r28, r30
    101e:	d1 1d       	adc	r29, r1
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	ed 01       	movw	r28, r26
    102c:	08 95       	ret

0000102e <_exit>:
    102e:	f8 94       	cli

00001030 <__stop_program>:
    1030:	ff cf       	rjmp	.-2      	; 0x1030 <__stop_program>
